name: Test

on:
  push:
    branches:
      - '**'
      - '!master'

env:
    unit_test_project: "tests/EnterpriseIntegration.Tests"
    integration_test_project: "tests/EnterpriseIntegration.IntegrationTests"
    rabbitmq_test_project: "tests/EnterpriseIntegration.RabbitMQ.Tests"
    kafka_test_project: "tests/EnterpriseIntegration.Kafka.Tests"
    latest_dotnet_version: "7.x"

jobs:
  unit_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: '0'
      - name: Setup .NET Core SDK ${{ env.latest_dotnet_version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.latest_dotnet_version }}
      - name: Install dependencies
        run: dotnet restore $unit_test_project
      - name: Build
        run: dotnet build $unit_test_project --no-restore --configuration Release
      - name: Test
        run: dotnet test $unit_test_project --no-restore --logger:trx --collect:"XPlat Code Coverage" --results-directory "TestResults" 
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: "TestResults"

  integration_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: '0'
      - name: Setup .NET Core SDK ${{ env.latest_dotnet_version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.latest_dotnet_version }}
      - name: Install dependencies
        run: dotnet restore $integration_test_project
      - name: Build
        run: dotnet build $integration_test_project --no-restore --configuration Release
      - name: Test
        run: dotnet test $integration_test_project --no-restore --logger:trx --collect:"XPlat Code Coverage" --results-directory "TestResults" 
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: "TestResults"

  rabbitmq_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: '0'
      - name: Setup .NET Core SDK ${{ env.latest_dotnet_version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.latest_dotnet_version }}
      - name: Install dependencies
        run: dotnet restore $rabbitmq_test_project
      - name: Build
        run: dotnet build $rabbitmq_test_project --no-restore --configuration Release
      - name: Test
        run: dotnet test $rabbitmq_test_project --no-restore --logger:trx --collect:"XPlat Code Coverage" --results-directory "TestResults" 
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: "TestResults"
        
  kafka_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: '0'
      - name: Setup .NET Core SDK ${{ env.latest_dotnet_version }}
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.latest_dotnet_version }}
      - name: Install dependencies
        run: dotnet restore $kafka_test_project
      - name: Build
        run: dotnet build $kafka_test_project --no-restore --configuration Release
      - name: Test
        run: dotnet test $kafka_test_project --no-restore --logger:trx --collect:"XPlat Code Coverage" --results-directory "TestResults"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results
          path: "TestResults"

  code_coverage:
    runs-on: ubuntu-latest
    needs: [unit_test, integration_test, rabbitmq_test, kafka_test]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dotnet-results
          path: "TestResults"

      - name: Setup .NET Core # Required to execute ReportGenerator
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x
          dotnet-quality: 'ga'

      - name: ReportGenerator
        uses: danielpalme/ReportGenerator-GitHub-Action@5.1.19
        with:
          reports: 'TestResults/**/coverage.cobertura.xml'
          targetdir: 'CoverageReport'
          reporttypes: 'HtmlInline;Cobertura'
          
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: CoverageReport
          path: "CoverageReport"

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: 'CoverageReport/Cobertura.xml'
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: '60 80'
     
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
          